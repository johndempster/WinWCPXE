// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Library Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 03/12/2024 14:58:41 (- $Rev: 12980 $, 1979687).

[
  uuid(2AE1CB67-2310-4EA0-B43D-916A931F4AE1),
  version(1.0),
  helpstring("winwcp Library"),
  helpfile("mer")

]
library winwcp
{

  importlib("stdole2.tlb");

  interface IAUTO;
  coclass AUTO;
  dispinterface DispInterface1;
  interface Interface1;


  [
    uuid(314667FF-F90F-435C-B738-3D6E58FF2BF6),
    version(1.0),
    helpstring("Dispatch interface for AUTO Object"),
    dual,
    oleautomation
  ]
  interface IAUTO: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall NewFile([in] VARIANT FileName);
    [id(0x000000CA)]
    HRESULT _stdcall OpenFile([in] VARIANT FileName);
    [id(0x000000CB)]
    HRESULT _stdcall CloseFile(void);
    [id(0x000000CC)]
    HRESULT _stdcall StartSealTest(void);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Cm([out, retval] VARIANT* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Cm([in] VARIANT Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Gm([out, retval] VARIANT* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall Gm([in] VARIANT Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Ga([out, retval] VARIANT* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall Ga([in] VARIANT Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Rseal([out, retval] VARIANT* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall Rseal([in] VARIANT Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall SealTestPulseAmplitude([out, retval] VARIANT* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall SealTestPulseAmplitude([in] VARIANT Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall SealTestPulseDuration([out, retval] VARIANT* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall SealTestPulseDuration([in] VARIANT Value);
    [id(0x000000D3)]
    HRESULT _stdcall StopSealTest(void);
    [propget, id(0x000000D4)]
    HRESULT _stdcall HoldingVoltage([out, retval] VARIANT* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall HoldingVoltage([in] VARIANT Value);
    [id(0x000000D5)]
    HRESULT _stdcall StartRecording(void);
    [id(0x000000D6)]
    HRESULT _stdcall StopRecording(void);
    [propget, id(0x000000D7)]
    HRESULT _stdcall TriggerMode([out, retval] VARIANT* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall TriggerMode([in] VARIANT Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall StimulusProtocol([out, retval] VARIANT* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall StimulusProtocol([in] VARIANT Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Vm([out, retval] VARIANT* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall Vm([in] VARIANT Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall Im([out, retval] VARIANT* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall Im([in] VARIANT Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall SealTestNumAverages([out, retval] VARIANT* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall SealTestNumAverages([in] VARIANT Value);
    [id(0x000000DC)]
    HRESULT _stdcall GetADCSample([in] long RecordNum, [in] long ChannelNum, [in] long SampleNum, [out] VARIANT* Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall NumRecordsInFile([out, retval] long* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall NumRecordsInFile([in] long Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall NumChannelsPerRecord([out, retval] long* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall NumChannelsPerRecord([in] long Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall NumSamplesPerChannel([out, retval] long* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall NumSamplesPerChannel([in] long Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall Status([out, retval] VARIANT* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall Status([in] VARIANT Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall PicoGain([out, retval] long* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall PicoGain([in] long Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall PicoInput([out, retval] long* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall PicoInput([in] long Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall PicoConfig([out, retval] long* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall PicoConfig([in] long Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall PicoFilter([out, retval] long* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall PicoFilter([in] long Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall PicoEnableCSlow([out, retval] long* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall PicoEnableCSlow([in] long Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall PicoENableCFast([out, retval] long* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall PicoENableCFast([in] long Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall PicoEnableJP([out, retval] long* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall PicoEnableJP([in] long Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall PicoCSlowComp([out, retval] VARIANT* Value);
    [propput, id(0x000000E8)]
    HRESULT _stdcall PicoCSlowComp([in] VARIANT Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall PicoCfastComp([out, retval] VARIANT* Value);
    [propput, id(0x000000E9)]
    HRESULT _stdcall PicoCfastComp([in] VARIANT Value);
    [propget, id(0x000000EA)]
    HRESULT _stdcall PicoJPComp([out, retval] VARIANT* Value);
    [propput, id(0x000000EA)]
    HRESULT _stdcall PicoJPComp([in] VARIANT Value);
    [id(0x000000EB)]
    HRESULT _stdcall PicoAutoCompCFast(void);
    [id(0x000000EC)]
    HRESULT _stdcall PicoAutoCompCSlow(void);
    [id(0x000000ED)]
    HRESULT _stdcall PicoAutoCompJP(void);
    [id(0x000000F0)]
    HRESULT _stdcall PicoClearCompC(void);
    [id(0x000000EE)]
    HRESULT _stdcall PicoClearCompJP(void);
    [propget, id(0x000000EF)]
    HRESULT _stdcall SealTestGaFromPeak([out, retval] long* Value);
    [propput, id(0x000000EF)]
    HRESULT _stdcall SealTestGaFromPeak([in] long Value);
    [propget, id(0x000000F1)]
    HRESULT _stdcall FileName([out, retval] VARIANT* Value);
    [propput, id(0x000000F1)]
    HRESULT _stdcall FileName([in] VARIANT Value);
  };

  [
    uuid(D3C5C4E5-632F-470D-8A9C-D79E86E1F425),
    dual,
    oleautomation
  ]
  interface Interface1: IDispatch
  {
  };

  [
    uuid(A15A5FCC-989B-40E7-8826-7FECF8DEBFC4)
  ]
  dispinterface DispInterface1
  {
    properties:
    methods:
  };

  [
    uuid(D16707AE-40F8-4310-BA8F-F56E544FE6FA),
    version(1.0),
    helpstring("AUTO Object")
  ]
  coclass AUTO
  {
    [default] interface IAUTO;
  };

};
